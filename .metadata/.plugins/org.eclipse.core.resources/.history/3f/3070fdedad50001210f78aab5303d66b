/***************************************************************************
 *  Copyright (C) 2012 by Vandolf Estrellado
 *  All Rights Reserved
 * 
 *  This file is part of KungFu Nekko.
 *  KungFu Nekko is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  KungFu Nekko is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KungFu Nekko.  If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/

package com.vestrel00.nekko.actors;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;
import com.vestrel00.nekko.Camera;
import com.vestrel00.nekko.KFNekko;
import com.vestrel00.nekko.actors.components.ChessPieceSprite;
import com.vestrel00.nekko.actors.components.Location;
import com.vestrel00.nekko.actors.states.CombatState;
import com.vestrel00.nekko.actors.states.FaceState;
import com.vestrel00.nekko.actors.states.HorizontalMotionState;
import com.vestrel00.nekko.actors.states.StatusState;
import com.vestrel00.nekko.actors.states.VerticalMotionState;
import com.vestrel00.nekko.actors.states.Visibility;

public class ChessPiece extends Actor {

	public static final int PAWN = 0, KNIGHT = 1, BISHOP = 2, ROOK = 3,
			QUEEN = 4, KING = 5;

	private ChessPieceSprite chessSprite;
	public Location location;
	private long lastAttackTime, attackDelay;
	private int damage;
	private float knockBackDistance, vibrateDirection =1.0f;
	private boolean aoe;

	public ChessPiece(Array<Actor> targets, int type, Location location) {
		super(targets, location, 0);
		AtlasRegion region = null;
		switch (type) {
		case PAWN:
			region = KFNekko.resource.atlas.findRegion("pawn");
			attackDelay = 1000000000L;
			damage = 1;
			knockBackDistance = 40.0f;
			aoe = false;
			maxHealth = 100;
			break;
		case KNIGHT:
			region = KFNekko.resource.atlas.findRegion("knight");
			attackDelay = 333333333L;
			damage = 1;
			knockBackDistance = 70.0f;
			aoe = false;
			maxHealth = 200;
			break;
		case BISHOP:
			region = KFNekko.resource.atlas.findRegion("bishop");
			attackDelay = 500000000L;
			damage = 2;
			knockBackDistance = 40.0f;
			aoe = true;
			maxHealth = 150;
			break;
		case ROOK:
			region = KFNekko.resource.atlas.findRegion("rook");
			attackDelay = 1000000000L;
			damage = 10;
			knockBackDistance = 150.0f;
			aoe = true;
			maxHealth = 400;
			break;
		case QUEEN:
			region = KFNekko.resource.atlas.findRegion("queen");
			attackDelay = 500000000L;
			damage = 2;
			knockBackDistance = 200.0f;
			aoe = true;
			maxHealth = 600;
			break;
		case KING:
			region = KFNekko.resource.atlas.findRegion("king");
			attackDelay = 1000000000L;
			damage = 6;
			knockBackDistance = 180.0f;
			aoe = true;
			maxHealth = 1000;
			break;
		}
		health = maxHealth;
		chessSprite = new ChessPieceSprite(this, new Color(Color.BLACK), region);
		sprite = chessSprite;
		location.setActor(this);
		// we are passing in the bottom (feet) y value not the center so...
		location.y += (float) sprite.currentTexture.originalHeight * 0.5f;
		location.updateRect();
		
	}

	@Override
	public boolean jump() {
		return false;
	}

	@Override
	public void setState(FaceState faceState, StatusState statusState,
			CombatState combatState,
			HorizontalMotionState horizontalMotionState,
			VerticalMotionState verticalMotionState) {
		super.setState(faceState, statusState, combatState,
				horizontalMotionState, verticalMotionState);
		vibrateDirection = (faceState == FaceState.LEFT) ? -1.0f : ;
	}

	@Override
	public void update() {
		// no ai like monster - just keep attacking
		if (TimeUtils.nanoTime() - lastAttackTime > attackDelay) {
			lastAttackTime = TimeUtils.nanoTime();
			attack(damage, aoe, knockBackDistance);
		}

		// imitate vibration
		if (TimeUtils.nanoTime() - lastAttackTime < 300000000L) {
			location.x += 10.0f * vibrateDirection;
			if (location.x < location.spawnX - 20.0f
					|| location.x > location.spawnX + 20.0f)
				vibrateDirection *= -1.0f;
		} else
			// revert to original position
			location.x = location.spawnX;

		// update rectangle
		location.updateRect();

		if (statusState != StatusState.DEAD)
			sprite.update();
	}

	@Override
	protected void receiveDamage(int damage) {
		super.receiveDamage(damage);
		float c = (float) damage / (float) maxHealth;

		if ((sprite.color.r += c) > 1.0f)
			sprite.color.r = 1.0f;
		if ((sprite.color.g += c) > 1.0f)
			sprite.color.g = 1.0f;
		if ((sprite.color.b += c) > 1.0f)
			sprite.color.b = 1.0f;
		// TODO SOUND
	}

	@Override
	public void attack(int damage, boolean aoe, float knockBackDistance) {
		boolean hit = false;
		for (int i = 0; i < targets.size; i++)
			if (targets.get(i).statusState == StatusState.ALIVE
					&& location.rect.overlaps(targets.get(i).location.rect)) {
				targets.get(i).receiveDamage(damage);
				targets.get(i).location.knockBack(knockBackDistance,
						(faceState == FaceState.LEFT) ? -1.0f : 1.0f);
				hit = true;
				if (!aoe)
					break;
			}
		// TODO SOUND
		// if(hit)
		if (visibility == Visibility.VISIBLE)
			KFNekko.camera.setEffect(Camera.EFFECT_SHAKE, 1.0f, 3.0f,
					200000000L);
	}

}
