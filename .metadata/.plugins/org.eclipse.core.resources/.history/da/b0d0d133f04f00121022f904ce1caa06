package com.vestrel00.nekko.maps.components;

import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
import com.badlogic.gdx.math.Rectangle;
import com.vestrel00.nekko.KFNekko;
import com.vestrel00.nekko.actors.Nekko;
import com.vestrel00.nekko.actors.components.Location;
import com.vestrel00.nekko.actors.components.Speed;
import com.vestrel00.nekko.actors.states.VerticalMotionState;
import com.vestrel00.nekko.interf.PickUp;

public class PowerUp implements PickUp {

	public static final int INVISIBILITY = 0, RAGE = 1, QUICKFEET = 2;

	private Rectangle rect;
	private AtlasRegion region;
	private int type;
	private boolean isActive = false;
	private Speed speed;

	public PowerUp(int type) {
		this.type = type;
		switch (type) {
		case INVISIBILITY:
			region = KFNekko.resource.atlas.findRegion("invisibility");
			break;
		case RAGE:
			region = KFNekko.resource.atlas.findRegion("rage");
			break;
		case QUICKFEET:
			region = KFNekko.resource.atlas.findRegion("quickfeet");
			break;
		}
		rect = new Rectangle();
		speed = new Speed();
	}

	@Override
	public void update() {
		if (isActive) {
			speed.decreaseHorizontalSpeed();
			float dx = speed.getXVelocity();
			float dy = speed.getYVelocity();

			boolean addDx = false, addDy = false;

			// detect slope first
			if (!KFNekko.map.platform.hitSlope(this, dx, dy)
					&& !KFNekko.map.platform.hitPlatform(actor, dx, dy))
				addDy = true;
			else {
				if (speed.yDirection == Speed.DIRECTION_DOWN)
					speed.ySpeed = 0.0f;
				actor.verticalMotionState = VerticalMotionState.FALLING;
			}

			if (actor.location.rect.x > 0.0f
					&& actor.location.rect.x + actor.location.rect.width < KFNekko.map.width)
				addDx = true;
			else if (actor.location.rect.x <= 0.0f)
				x += 1.0f;
			else if (actor.location.rect.x + actor.location.rect.width >= KFNekko.map.width)
				x -= 1.0f;
			// TODO wall detection

			if (addDx)
				x += dx;
			if (addDy)
				y += dy;

			// rough patch should never happen now though
			if (y < 0.0f)
				y = spawnY;

			// All sprites must have same dimensions!
			rect.set(x - (float) actor.sprite.currentTexture.originalWidth
					* 0.5f,
					y - (float) actor.sprite.currentTexture.originalHeight
							* 0.5f,
					(float) actor.sprite.currentTexture.originalWidth,
					(float) actor.sprite.currentTexture.originalHeight);
		}
	}

	@Override
	public void draw(SpriteBatch batch) {
		if (isActive)
			batch.draw(region, rect.x, rect.y, rect.width, rect.height);
	}

	@Override
	public void drop(Location location) {
		if (!isActive) {
			rect.set(location.rect);
			isActive = true;
			speed.set(location.speed);
		}
	}

	@Override
	public void pickUp(Nekko nekko) {
		if (isActive) {
			isActive = false;
			switch (type) {
			case INVISIBILITY:
				KFNekko.player.powerUp(INVISIBILITY);
				break;
			case RAGE:
				KFNekko.player.powerUp(RAGE);
				break;
			case QUICKFEET:
				KFNekko.player.powerUp(QUICKFEET);
				break;
			}
		}
	}

}
