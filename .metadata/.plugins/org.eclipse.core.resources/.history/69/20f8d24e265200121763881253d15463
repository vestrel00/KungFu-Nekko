package com.vestrel00.nekko.maps;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;
import com.vestrel00.nekko.Camera;
import com.vestrel00.nekko.KFNekko;
import com.vestrel00.nekko.actors.states.CombatState;
import com.vestrel00.nekko.actors.states.FaceState;
import com.vestrel00.nekko.actors.states.HorizontalMotionState;
import com.vestrel00.nekko.actors.states.StatusState;
import com.vestrel00.nekko.actors.states.VerticalMotionState;
import com.vestrel00.nekko.maps.components.MapPieceGenerator;
import com.vestrel00.nekko.maps.components.MapSection;

public class LSKingsAndQueens extends LastStandHelper {

	public LSKingsAndQueens(Array<MapSection> sections, LastStand ls) {
		super(sections, ls);
		// all map sections will start at (0, 0)
		MapSection section1 = new MapSection(0.0f, 0.0f, 832.0f, 576.0f);
		sections.add(section1);
		section1.pieces.add(MapPieceGenerator.genQuads(false, 0, 6, 2, 384, 0));
		// fillers
		section1.pieces.add(MapPieceGenerator.genQuads(true, 0, 4, 2, 128, 0));
		section1.pieces.add(MapPieceGenerator.genQuads(true, 0, 4, 2, 768, 0));
		section1.pieces.add(MapPieceGenerator.genQuads(true, 0, 4, 2, 0, 128));
		section1.pieces
				.add(MapPieceGenerator.genQuads(true, 0, 4, 2, 896, 128));
		section1.pieces.add(MapPieceGenerator.genQuads(true, 0, 2, 2, 0, 0));
		section1.pieces.add(MapPieceGenerator.genQuads(true, 0, 2, 2, 0, 1024));
		section1.pieces.add(MapPieceGenerator.genQuads(true, 0, 1, 3, 0, 256));
		section1.pieces.add(MapPieceGenerator
				.genQuads(true, 0, 1, 3, 1088, 256));
		section1.pieces.add(MapPieceGenerator.genQuads(true, 0, 1, 2, 64, 256));
		section1.pieces.add(MapPieceGenerator
				.genQuads(true, 0, 1, 2, 1024, 256));
		section1.pieces
				.add(MapPieceGenerator.genQuads(true, 0, 1, 1, 128, 256));
		section1.pieces
				.add(MapPieceGenerator.genQuads(true, 0, 1, 1, 960, 256));
		section1.pieces
				.add(MapPieceGenerator.genQuads(true, 0, 1, 1, 256, 128));
		section1.pieces
				.add(MapPieceGenerator.genQuads(true, 0, 1, 1, 832, 128));
		// stairs
		section1.pieces.add(MapPieceGenerator.genStairs(1, 0, 6, 0, 128));
		section1.pieces.add(MapPieceGenerator.genStairs(1, 1, 6, 768, 128));

		KFNekko.map.width = 1152.0f;
		KFNekko.map.height = 960.0f;

		// set player spawn location
		KFNekko.player.reset(576.0f, 704.0f);
		KFNekko.player.setState(FaceState.LEFT, StatusState.ALIVE,
				CombatState.IDLE, HorizontalMotionState.IDLE,
				VerticalMotionState.FALLING);

		// camera work
		KFNekko.camera.targetActor = KFNekko.player;
		KFNekko.camera.mode = Camera.MODE_SCROLL;
		KFNekko.camera.normalizeXSpeed = 3;
		KFNekko.camera.normalizeYSpeed = 3;

		// init the pieces
		initChessPieces();

		// initialize monster spawn locations
		monsterLocs = new Vector2[3];
		monsterLocs[0] = new Vector2(192.0f, 576.0f);
		monsterLocs[1] = new Vector2(576.0f, 384.0f);
		monsterLocs[2] = new Vector2(960.0f, 576.0f);

		//
		maxBatchCount = 5;
		interSpawnDelay = 200000000L;
		difficulty = 3;

		// init spawn rectangles for checking visibility
		initSpawnPortals();
	}

	private void initChessPieces() {
		// TODO Auto-generated method stub

	}

	@Override
	public void signalSpawn() {
		// TODO Auto-generated method stub

	}

	@Override
	public void drawChessPieceIcons(SpriteBatch batch) {
		// TODO Auto-generated method stub

	}

	@Override
	public void setCamera(int instructionIndex) {
		switch (instructionIndex) {
		case 1: // "The Pieces"
			KFNekko.player.nekkoSprite.targetColor.set(Color.DARK_GRAY);
			for (int i = 0; i < chessPieces.size; i++) {
				chessPieces.get(i).chessSprite.targetColor.set(Color.BLUE);
				// vibrate until next instruction
				chessPieces.get(i).hit = true;
				chessPieces.get(i).lastAttackTime = TimeUtils.nanoTime();
				chessPieces.get(i).vibrationDuration = 10000000000000000L;
				chessPieces.get(i).forceVibrate = true;
				chessPieces.get(i).vibrationSpeed = 1.0f;
				chessPieces.get(i).vibrationDist = 1.0f;
			}
			break;
		case 2: // skip to Queen
			ls.instruction.instructionIndex = 4;
			// undo changes
			KFNekko.player.nekkoSprite.targetColor.set(Color.WHITE);
			for (int i = 0; i < chessPieces.size; i++) {
				chessPieces.get(i).chessSprite.targetColor.set(Color.WHITE);
				chessPieces.get(i).resetVibrationState();
			}
			KFNekko.camera.targetActor = chessPieces.get(0);
			chessPieces.get(0).chessSprite.targetColor.set(Color.BLUE);
			break;
		case 5: // Skip to KING
			ls.instruction.instructionIndex = 7;
			chessPieces.get(0).chessSprite.targetColor.set(Color.WHITE);
			KFNekko.camera.targetActor = chessPieces.get(2);
			chessPieces.get(2).chessSprite.targetColor.set(Color.BLUE);
			break;
		case 8: // "Black Hole"
			// reset
			chessPieces.get(2).chessSprite.targetColor.set(Color.WHITE);

			KFNekko.camera.targetActor = null;
			KFNekko.camera.targetLoc.set(monsterLocs[1]);
			break;
		}
	}

	@Override
	public void setMonsterSpawnDelay(int wave) {
		if ((monsterSpawnDelay = 10000000000L - (long) (wave / 2) * 1000000000L) < 1000000000L)
			monsterSpawnDelay = 1000000000L;
	}

}
