package com.vestrel00.nekko.actors;

import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.utils.Array;
import com.vestrel00.nekko.actors.components.CuteMonsterSprite;
import com.vestrel00.nekko.actors.components.Location;
import com.vestrel00.nekko.actors.states.CombatState;
import com.vestrel00.nekko.actors.states.StatusState;

public class CuteMonster extends Actor {

	private CuteMonsterSprite cuteSprite;
	private Actor target;
	private float aggroRange;

	public CuteMonster(TextureAtlas atlas, Location location,
			Array<Actor> targets, int maxHealth, float aggroRange) {
		super(targets, location, maxHealth);
		cuteSprite = new CuteMonsterSprite(this, atlas);
		sprite = cuteSprite;
		this.aggroRange = aggroRange;
	}

	@Override
	public void update() {
		// make sure that target is still alive and within the aggro range
		if (target != null && (target.statusState == StatusState.DEAD || !wihinAggroRange(target)))
			target = null;
		// target selection
		if (target == null)
			for (int i = 0; i < targets.size; i++)
				if (withinAggroRange(targets.get(i))) {
					target = targets.get(i);
					break;
				}

		if (target != null && cuteSprite.combatIndex == 0
				&& location.rect.overlaps(target.location.rect)) {
			setCombatState(CombatState.ATTACK);
			// TODO SOUND
		}

		super.update();
	}

	private boolean withinAggroRange(Actor targ) {
		return targ.location.x >= location.x - aggroRange
				&& targ.location.x <= location.x + aggroRange
				&& targ.location.y >= location.y - aggroRange
				&& targ.location.y <= location.y + aggroRange;
	}

	@Override
	public void onLanding() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDeath() {
		// TODO Auto-generated method stub

	}

}
