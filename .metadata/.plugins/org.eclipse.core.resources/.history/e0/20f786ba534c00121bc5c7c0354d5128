package com.vestrel00.nekko.ui.components;

import com.badlogic.gdx.utils.TimeUtils;
import com.vestrel00.nekko.actors.states.CombatState;
import com.vestrel00.nekko.interf.CombatStateManager;

public class SimpleAttackManager implements CombatStateManager {

	private CombatState[] comboDown, comboUp, comboRight, comboLeft;
	private int lastInput, inputIndex;
	private long lastInputTime;

	public SimpleAttackManager() {
		comboDown = new CombatState[4];
		comboUp = new CombatState[4];
		comboLeft = new CombatState[4];
		comboRight = new CombatState[4];

		comboDown[0] = CombatState.FASTSHOT;
		comboDown[1] = CombatState.ONETWOCOMBO;
		comboDown[2] = CombatState.UPPERCUT;
		comboDown[3] = CombatState.SUPERUPPERCUT;

		comboUp[0] = CombatState.LOWMIDDLEKICK;
		comboUp[1] = CombatState.HIGHKICK;
		comboUp[2] = CombatState.DOWNWARDKICK;
		comboUp[3] = CombatState.ROUNDKICK;

		comboLeft[0] = CombatState.FASTSHOT;
		comboLeft[1] = CombatState.ONETWOCOMBO;
		comboLeft[2] = CombatState.ROUNDKICK;
		comboLeft[3] = CombatState.TWOSIDEDATTACK;

		comboRight[0] = CombatState.FLYINGKICK;
		comboRight[1] = CombatState.SPIN;
		comboRight[2] = CombatState.HIGHKICK;
		comboRight[3] = CombatState.POWERSHOT;
	}

	/**
	 * <p>
	 * Only expects input left, right, up, down.
	 * </p>
	 * <ol>
	 * <b>INPUT_DOWN</b>
	 * <li>FASTSHOT</li>
	 * <li>ONETWOCOMBO</li>
	 * <li>UPPERCUT</li>
	 * <li>SUPERUPPERCUT</li>
	 * </ol>
	 * <ol>
	 * <b>INPUT_UP</b>
	 * <li>LOWMIDDLEKICK</li>
	 * <li>HIGHKICK</li>
	 * <li>DOWNWARDKICK</li>
	 * <li>ROUNDKICK</li>
	 * </ol>
	 * <ol>
	 * <b>INPUT_LEFT</b>
	 * <li>FASTSHOT</li>
	 * <li>ONETWOCOMBO</li>
	 * <li>ROUNDKICK</li>
	 * <li>TWOSIDEDATTACK</li>
	 * </ol>
	 * <ol>
	 * <b>INPUT_RIGHT</b>
	 * <li>FLYINGKICK</li>
	 * <li>SPIN</li>
	 * <li>HIGHKICK</li>
	 * <li>POWERSHOT</li>
	 * </ol>
	 */
	@Override
	public CombatState input(int input) {
		if (TimeUtils.nanoTime() - lastInputTime > CombatStateManager.RESET_DELAY) {
			inputIndex = 0;
			lastInput = input;
		}

		switch (input) {
		case INPUT_LEFT:

			break;
		case INPUT_RIGHT:

			break;
		case INPUT_UP:

			break;
		case INPUT_DOWN:

			break;
		}
		return CombatState.IDLE;
	}

}
