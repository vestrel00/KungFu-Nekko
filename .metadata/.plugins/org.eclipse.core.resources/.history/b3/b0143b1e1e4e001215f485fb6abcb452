package com.vestrel00.nekko;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
import com.badlogic.gdx.math.Rectangle;
import com.vestrel00.nekko.interf.Drawable;
import com.vestrel00.nekko.interf.Touchable;
import com.vestrel00.nekko.interf.Updatable;

public class IntroSelectionManager implements Updatable, Drawable, Touchable {

	private final CharSequence[] strings = { "The Last Stand", "The Mercenary",
			"The Collector", "The Adventurer" };

	private float[] widths;
	private int phase = 0;
	private Color color;
	private AtlasRegion buttonRegion;
	private Rectangle lastStandRect, mercenaryRect, collectorRect,
			adventurerRect;

	public IntroSelectionManager(TextureAtlas atlas) {
		color = new Color(Color.CLEAR);
		buttonRegion = atlas.findRegion("button_large");
		widths = new float[strings.length];
		for (int i = 0; i < widths.length; i++)
			widths[i] = KFNekko.resource.chunkFive.getBounds(strings[i]).width;
		lastStandRect = new Rectangle(KFNekko.camera.camera.position.x
				- (float) buttonRegion.originalWidth * 0.5f, 216.0f,
				(float) buttonRegion.originalWidth,
				(float) buttonRegion.originalHeight);
		mercenaryRect = new Rectangle(lastStandRect.x, 216.0f,
				lastStandRect.width,
				lastStandRect.height);
		collectorRect = new Rectangle(KFNekko.camera.camera.position.x
				- (float) buttonRegion.originalWidth * 0.5f, 216.0f,
				(float) buttonRegion.originalWidth,
				(float) buttonRegion.originalHeight);
		adventurerRect = new Rectangle(KFNekko.camera.camera.position.x
				- (float) buttonRegion.originalWidth * 0.5f, 216.0f,
				(float) buttonRegion.originalWidth,
				(float) buttonRegion.originalHeight);
	}

	@Override
	public void draw(SpriteBatch batch) {
		// TODO Auto-generated method stub

	}

	@Override
	public void update() {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean onTouchDown(float x, float y) {
		// TODO Auto-generated method stub
		return false;
	}

	private boolean updateColor(float colorSpeed) {
		switch (phase) {
		case 0: // fade in view
			color.r += colorSpeed;
			color.g += colorSpeed;
			color.b += colorSpeed;
			color.a += colorSpeed;
			if (color.a > 1.0f) {
				color.r = 1.0f;
				color.g = 1.0f;
				color.b = 1.0f;
				color.a = 1.0f;
				return true;
			}
			break;
		case 1: // fade out to game
			color.a -= 0.03f;
			if (color.a < 0.0f) {
				phase = 0;
				// TODO
				// initialize map and background
				color.set(Color.CLEAR);
				return true;
			}
			break;
		}
		return false;
	}

}
