package com.vestrel00.nekko.actors.components;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
import com.vestrel00.nekko.KFNekko;
import com.vestrel00.nekko.actors.Nekko;
import com.vestrel00.nekko.actors.components.effects.AfterImage;
import com.vestrel00.nekko.actors.states.StatusState;

public class NekkoAISprite extends NekkoSprite {

	public NekkoAISprite(Nekko nekko, TextureAtlas atlas, Color color) {
		super(nekko, atlas, color);
	}

	@Override
	protected void initProjectiles(TextureAtlas atlas) {
		projectiles = new Projectile[10];
		for (int i = 0; i < projectiles.length; i++)
			projectiles[i] = new Projectile(KFNekko.enemies);
		fastShotRegions = new AtlasRegion[7];
		jumpShotRegions = new AtlasRegion[7];
		powerShotRegions = new AtlasRegion[7];
		superShotRegions = new AtlasRegion[7];
		for (int i = 0; i < 7; i++) {
			String iStr = String.valueOf(i);
			fastShotRegions[i] = atlas.findRegion("shot" + iStr);
			jumpShotRegions[i] = atlas.findRegion("shotDown" + iStr);
			powerShotRegions[i] = atlas.findRegion("chargedShot" + iStr);
			superShotRegions[i] = atlas.findRegion("superShot" + iStr);
		}
	}

	protected void initEffects(TextureAtlas atlas) {
		combatImages = new AfterImage[3];
		effectImages = new AfterImage[4];
		for (int i = 0; i < combatImages.length; i++)
			combatImages[i] = new AfterImage();
		for (int i = 0; i < effectImages.length; i++)
			effectImages[i] = new AfterImage();
		attackEffect1 = atlas.findRegion("attackEffect1");
		smokeEffect = atlas.findRegion("smokeEffect");
	}

	@Override
	protected boolean switchStatusState() {
		switch (nekko.statusState) {
		case DYING:
			if (++dyingIndex == dying.length) {
				dyingIndex = 0;
				nekko.statusState = StatusState.DEAD;
				// no game over
			}
			currentTexture = dying[dyingIndex];
			animationDelay = 80000000L;
			return true;
		default:
			return false;
		}
	}

}
