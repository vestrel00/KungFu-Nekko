package com.vestrel00.nekko.actors.components;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
import com.badlogic.gdx.utils.TimeUtils;
import com.vestrel00.nekko.Camera;
import com.vestrel00.nekko.KFNekko;
import com.vestrel00.nekko.Methods;
import com.vestrel00.nekko.actors.Nekko;
import com.vestrel00.nekko.actors.components.effects.AfterImage;
import com.vestrel00.nekko.actors.states.FaceState;
import com.vestrel00.nekko.actors.states.HorizontalMotionState;
import com.vestrel00.nekko.actors.states.StatusState;

public class NekkoAISprite extends NekkoSprite {

	public NekkoAISprite(Nekko nekko, TextureAtlas atlas, Color color) {
		super(nekko, atlas, color);
	}

	@Override
	protected void initProjectiles(TextureAtlas atlas) {
		projectiles = new Projectile[10];
		for (int i = 0; i < projectiles.length; i++)
			projectiles[i] = new Projectile(KFNekko.enemies);
		fastShotRegions = new AtlasRegion[7];
		jumpShotRegions = new AtlasRegion[7];
		powerShotRegions = new AtlasRegion[7];
		superShotRegions = new AtlasRegion[7];
		for (int i = 0; i < 7; i++) {
			String iStr = String.valueOf(i);
			fastShotRegions[i] = atlas.findRegion("shot" + iStr);
			jumpShotRegions[i] = atlas.findRegion("shotDown" + iStr);
			powerShotRegions[i] = atlas.findRegion("chargedShot" + iStr);
			superShotRegions[i] = atlas.findRegion("superShot" + iStr);
		}
	}
	
	@Override
	private void activateEffect() {
		if (cameraEffect)
			KFNekko.bumpWC(0.1f, 0.1f, 0.1f);
		float zoomAmount = 0.0f;
		// do not exceed a certain value (maybe 20?) since it might cause you to
		// fall of the map!
		switch (nekko.combatState) {
		// step back for projectile attacks
		case FASTSHOT:
		case JUMPSHOT:
			stepForward(-8.0f);
			break;
		case POWERSHOT:
			stepForward(-14.0f);
			stepForward(-14.0f);
			break;
		case SUPERSHOT:
			stepForward(-14.0f);
			stepForward(-14.0f);
			stepForward(-14.0f);
			stepForward(-14.0f);
			break;
		case GATTLINGSHOT:
			stepForward(-6.0f);
			break;
		default: // forward for melee
			stepForward(14.0f);
			stepForward(14.0f);
			break;
		}

		switch (nekko.combatState) {
		case SPIN:
			zoomAmount = 0.07f;
			if (combatIndex == 7) {
				if (nekko.faceState == FaceState.LEFT)
					effectImages[effectImgIndex].activate(attackEffect1,
							nekko.location.x - 25.0f, nekko.location.y - 8.0f,
							0.08f, -0.3f, false, 0.0f, color);
				else
					effectImages[effectImgIndex].activate(attackEffect1,
							nekko.location.x + 25.0f, nekko.location.y - 8.0f,
							0.08f, 0.3f, true, 0.0f, color);
			}
			if (nekko.location.onPlatform || nekko.location.onSlope) {
				if (cameraEffect)
					KFNekko.camera.setEffect(Camera.EFFECT_SHAKE, 1.0f, 4.0f,
							300000000L);
				activateSmoke();
				if (TimeUtils.nanoTime() - lastCombatSound > 100000000L) {
					lastCombatSound = TimeUtils.nanoTime();
					KFNekko.audio.groundBoom(nekko.location.x);
				}
			}
			break;
		case JAB:
		case ONETWOCOMBO:
			effectImgIndex = Methods.incrementIndex(effectImgIndex,
					effectImages.length);
			if (nekko.faceState == FaceState.LEFT)
				effectImages[effectImgIndex].activate(attackEffect1,
						nekko.location.rect.x + 10.0f, nekko.location.y - 5.0f,
						0.08f, -0.3f, false, 0.0f, color);
			else
				effectImages[effectImgIndex].activate(attackEffect1,
						nekko.location.rect.x + nekko.location.rect.width
								- 10.0f, nekko.location.y - 5.0f, 0.08f, 0.3f,
						true, 0.0f, color);
			zoomAmount = 0.035f;
			break;
		case FLYINGKICK:
			effectImgIndex = Methods.incrementIndex(effectImgIndex,
					effectImages.length);
			if (combatIndex == 6) {
				if (nekko.faceState == FaceState.LEFT)
					effectImages[effectImgIndex].activate(attackEffect1,
							nekko.location.x - 19.0f, nekko.location.y - 19.0f,
							0.08f, -0.3f, false, 0.0f, color);
				else
					effectImages[effectImgIndex].activate(attackEffect1,
							nekko.location.x + 19.0f, nekko.location.y - 19.0f,
							0.08f, 0.3f, true, 0.0f, color);
			}
			zoomAmount = 0.05f;
			break;
		case SUPERUPPERCUT:
			effectImgIndex = Methods.incrementIndex(effectImgIndex,
					effectImages.length);
			if (combatIndex == 5) {
				if (nekko.faceState == FaceState.LEFT)
					effectImages[effectImgIndex].activate(attackEffect1,
							nekko.location.x - 13.0f, nekko.location.y + 16.0f,
							0.08f, 0.0f, false, 0.0f, color);
				else
					effectImages[effectImgIndex].activate(attackEffect1,
							nekko.location.x + 13.0f, nekko.location.y + 16.0f,
							0.08f, 0.0f, true, 0.0f, color);
			}
			zoomAmount = 0.09f;
			break;
		case LOWMIDDLEKICK:
			effectImgIndex = Methods.incrementIndex(effectImgIndex,
					effectImages.length);
			if (nekko.faceState == FaceState.LEFT)
				effectImages[effectImgIndex]
						.activate(attackEffect1, nekko.location.x
								- ((combatIndex == 2) ? 18.0f : 20.0f),
								nekko.location.y
										- ((combatIndex == 2) ? 25.0f : 14.0f),
								0.08f, -0.3f, false, 0.0f, color);
			else
				effectImages[effectImgIndex]
						.activate(attackEffect1, nekko.location.x
								+ ((combatIndex == 2) ? 18.0f : 20.0f),
								nekko.location.y
										- ((combatIndex == 2) ? 25.0f : 14.0f),
								0.08f, 0.3f, true, 0.0f, color);
			zoomAmount = 0.035f;
			stepForward(12.0f);
			break;
		case HIGHKICK:
			effectImgIndex = Methods.incrementIndex(effectImgIndex,
					effectImages.length);
			if (nekko.faceState == FaceState.LEFT)
				effectImages[effectImgIndex].activate(attackEffect1,
						nekko.location.x - 27.0f, nekko.location.y, 0.08f,
						0.0f, false, 0.0f, color);
			else
				effectImages[effectImgIndex].activate(attackEffect1,
						nekko.location.x + 27.0f, nekko.location.y, 0.08f,
						0.0f, true, 0.0f, color);
			zoomAmount = 0.035f;
			stepForward(12.0f);
			break;
		case DOWNWARDKICK:
			effectImgIndex = Methods.incrementIndex(effectImgIndex,
					effectImages.length);
			if (nekko.faceState == FaceState.LEFT)
				effectImages[effectImgIndex].activate(attackEffect1,
						nekko.location.x - 21.0f, nekko.location.y - 17.0f,
						0.08f, 0.0f, false, 0.0f, color);
			else
				effectImages[effectImgIndex].activate(attackEffect1,
						nekko.location.x + 21.0f, nekko.location.y - 17.0f,
						0.08f, 0.0f, true, 0.0f, color);
			zoomAmount = 0.05f;
			stepForward(12.0f);
			break;
		case TWOSIDEDATTACK:
			effectImgIndex = Methods.incrementIndex(effectImgIndex,
					effectImages.length);
			effectImages[effectImgIndex].activate(
					attackEffect1, // left
					nekko.location.x - 22.0f, nekko.location.y - 7.0f, 0.08f,
					-12.0f, false, 2.0f, color);
			effectImgIndex = Methods.incrementIndex(effectImgIndex,
					effectImages.length);
			effectImages[effectImgIndex].activate(
					attackEffect1,// right
					nekko.location.x + 22.0f, nekko.location.y - 7.0f, 0.08f,
					12.0f, true, 2.0f, color);

			combatImgIndex = Methods.incrementIndex(combatImgIndex,
					combatImages.length);
			combatImages[combatImgIndex].activate(currentTexture,
					nekko.location.x, nekko.location.y, 0.08f, -12.0f, true,
					2.0f, color);
			combatImgIndex = Methods.incrementIndex(combatImgIndex,
					combatImages.length);
			combatImages[combatImgIndex].activate(currentTexture,
					nekko.location.x, nekko.location.y, 0.08f, 12.0f, false,
					2.0f, color);
			zoomAmount = 0.08f;
			break;
		case ROUNDKICK:
			effectImgIndex = Methods.incrementIndex(effectImgIndex,
					effectImages.length);
			if (nekko.faceState == FaceState.LEFT)
				effectImages[effectImgIndex].activate(attackEffect1,
						nekko.location.rect.x + 4.0f, nekko.location.y + 14.0f,
						0.08f, 0.0f, false, 0.0f, color);
			else
				effectImages[effectImgIndex].activate(attackEffect1,
						nekko.location.rect.x + nekko.location.rect.width
								- 4.0f, nekko.location.y + 14.0f, 0.08f, 0.0f,
						true, 0.0f, color);
			zoomAmount = 0.06f;
			break;
		case UPPERCUT:
			effectImgIndex = Methods.incrementIndex(effectImgIndex,
					effectImages.length);
			if (nekko.faceState == FaceState.LEFT)
				effectImages[effectImgIndex].activate(attackEffect1,
						nekko.location.rect.x, nekko.location.y + 20.0f, 0.08f,
						0.0f, false, 0.0f, color);
			else
				effectImages[effectImgIndex].activate(attackEffect1,
						nekko.location.rect.x + nekko.location.rect.width,
						nekko.location.y + 21.0f, 0.08f, 0.0f, true, 0.0f,
						color);
			zoomAmount = 0.065f;
			break;
		case BEATDOWN:
		case LIGHTNINGKICKS:
		case SPEEDYHANDS:
		case GATTLINGSHOT:
			zoomAmount = 0.2f;
			break;
		// projectile attacks:
		case FASTSHOT:
		case JUMPSHOT:
			zoomAmount = -0.07f;
			break;
		case SUPERSHOT:
		case POWERSHOT:
			zoomAmount = 0.07f;
			break;
		}
		if (cameraEffect)
			KFNekko.camera.setEffect(Camera.EFFECT_ZOOM, zoomAmount, 0.0063f,
					0L);
	}

	@Override
	public void update() {
		Methods.updateColor(color, targetColor, colorSpeed);
		// update projectiles
		for (int i = 0; i < projectiles.length; i++)
			projectiles[i].update();

		if (TimeUtils.nanoTime() - lastAnimationTime < animationDelay)
			return;
		lastAnimationTime = TimeUtils.nanoTime();

		xScale = (nekko.faceState == FaceState.LEFT) ? -1.0f : 1.0f;

		switchCombatImages();

		if (switchStatusState())
			return;

		if (nekko.horizontalMotionState != HorizontalMotionState.KNOCKED_BACK
				&& switchCombatState())
			return;
		if (nekko.horizontalMotionState != HorizontalMotionState.KNOCKED_BACK
				&& switchVerticalMotionState())
			return;

		switchHorizontalMotionState();
	}

	public void activateSmoke() {

	}

	@Override
	protected void initEffects(TextureAtlas atlas) {
	}

	@Override
	protected boolean switchStatusState() {
		switch (nekko.statusState) {
		case DYING:
			if (++dyingIndex == dying.length) {
				dyingIndex = 0;
				nekko.statusState = StatusState.DEAD;
				// no game over
			}
			currentTexture = dying[dyingIndex];
			animationDelay = 80000000L;
			return true;
		default:
			return false;
		}
	}

}
